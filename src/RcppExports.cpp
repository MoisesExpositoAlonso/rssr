// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// betavar
Eigen::ArrayXd betavar(const Eigen::ArrayXd& p, const Eigen::ArrayXd& mu, const Eigen::ArrayXd& s);
RcppExport SEXP rssr_betavar(SEXP pSEXP, SEXP muSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(betavar(p, mu, s));
    return rcpp_result_gen;
END_RCPP
}
// intklbeta_rssbvsr
double intklbeta_rssbvsr(const Eigen::ArrayXd& alpha, const Eigen::ArrayXd& mu, const Eigen::ArrayXd& sigma_square, double sigma_beta_square);
RcppExport SEXP rssr_intklbeta_rssbvsr(SEXP alphaSEXP, SEXP muSEXP, SEXP sigma_squareSEXP, SEXP sigma_beta_squareSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type sigma_square(sigma_squareSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_beta_square(sigma_beta_squareSEXP);
    rcpp_result_gen = Rcpp::wrap(intklbeta_rssbvsr(alpha, mu, sigma_square, sigma_beta_square));
    return rcpp_result_gen;
END_RCPP
}
// intgamma
double intgamma(double logodds, const Eigen::ArrayXd& alpha);
RcppExport SEXP rssr_intgamma(SEXP logoddsSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(intgamma(logodds, alpha));
    return rcpp_result_gen;
END_RCPP
}
// rel_err
double rel_err(double p0, double p1);
RcppExport SEXP rssr_rel_err(SEXP p0SEXP, SEXP p1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    rcpp_result_gen = Rcpp::wrap(rel_err(p0, p1));
    return rcpp_result_gen;
END_RCPP
}
// find_maxerr
double find_maxerr(const Eigen::ArrayXd& alpha, const Eigen::ArrayXd& alpha0, const Eigen::ArrayXd& r, const Eigen::ArrayXd& r0);
RcppExport SEXP rssr_find_maxerr(SEXP alphaSEXP, SEXP alpha0SEXP, SEXP rSEXP, SEXP r0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type r0(r0SEXP);
    rcpp_result_gen = Rcpp::wrap(find_maxerr(alpha, alpha0, r, r0));
    return rcpp_result_gen;
END_RCPP
}
// update_logodds
double update_logodds(const Eigen::ArrayXd& alpha);
RcppExport SEXP rssr_update_logodds(SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_logodds(alpha));
    return rcpp_result_gen;
END_RCPP
}
// calculate_lnZ
double calculate_lnZ(const Eigen::VectorXd& q, const Eigen::VectorXd& r, const Eigen::VectorXd& SiRiSr, double logodds, const Eigen::VectorXd& sesquare, const Eigen::VectorXd& alpha, const Eigen::VectorXd& mu, const Eigen::VectorXd& s, double sigb);
RcppExport SEXP rssr_calculate_lnZ(SEXP qSEXP, SEXP rSEXP, SEXP SiRiSrSEXP, SEXP logoddsSEXP, SEXP sesquareSEXP, SEXP alphaSEXP, SEXP muSEXP, SEXP sSEXP, SEXP sigbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type SiRiSr(SiRiSrSEXP);
    Rcpp::traits::input_parameter< double >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type sesquare(sesquareSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type sigb(sigbSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_lnZ(q, r, SiRiSr, logodds, sesquare, alpha, mu, s, sigb));
    return rcpp_result_gen;
END_RCPP
}
// rss_varbvsr_naive_alt
Rcpp::List rss_varbvsr_naive_alt(const Eigen::SparseMatrix<double>& SiRiS, const double sigma_beta, const double logodds, const Eigen::ArrayXd betahat, const Eigen::ArrayXd se, const Eigen::ArrayXd& talpha0, const Eigen::ArrayXd& tmu0, const Eigen::ArrayXd& tSiRiSr0, double tolerance, int itermax, Rcpp::LogicalVector verbose, Rcpp::LogicalVector lnz_tol);
RcppExport SEXP rssr_rss_varbvsr_naive_alt(SEXP SiRiSSEXP, SEXP sigma_betaSEXP, SEXP logoddsSEXP, SEXP betahatSEXP, SEXP seSEXP, SEXP talpha0SEXP, SEXP tmu0SEXP, SEXP tSiRiSr0SEXP, SEXP toleranceSEXP, SEXP itermaxSEXP, SEXP verboseSEXP, SEXP lnz_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type SiRiS(SiRiSSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type se(seSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type talpha0(talpha0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type tmu0(tmu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type tSiRiSr0(tSiRiSr0SEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type lnz_tol(lnz_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rss_varbvsr_naive_alt(SiRiS, sigma_beta, logodds, betahat, se, talpha0, tmu0, tSiRiSr0, tolerance, itermax, verbose, lnz_tol));
    return rcpp_result_gen;
END_RCPP
}
// rss_varbvsr_squarem_alt
Rcpp::List rss_varbvsr_squarem_alt(const Eigen::SparseMatrix<double>& SiRiS, const double sigma_beta, const double logodds, const Eigen::ArrayXd betahat, const Eigen::ArrayXd se, const Eigen::ArrayXd& talpha0, const Eigen::ArrayXd& tmu0, const Eigen::ArrayXd& tSiRiSr0, double tolerance, int itermax, Rcpp::LogicalVector verbose, Rcpp::LogicalVector lnz_tol);
RcppExport SEXP rssr_rss_varbvsr_squarem_alt(SEXP SiRiSSEXP, SEXP sigma_betaSEXP, SEXP logoddsSEXP, SEXP betahatSEXP, SEXP seSEXP, SEXP talpha0SEXP, SEXP tmu0SEXP, SEXP tSiRiSr0SEXP, SEXP toleranceSEXP, SEXP itermaxSEXP, SEXP verboseSEXP, SEXP lnz_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type SiRiS(SiRiSSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type se(seSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type talpha0(talpha0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type tmu0(tmu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type tSiRiSr0(tSiRiSr0SEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type lnz_tol(lnz_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rss_varbvsr_squarem_alt(SiRiS, sigma_beta, logodds, betahat, se, talpha0, tmu0, tSiRiSr0, tolerance, itermax, verbose, lnz_tol));
    return rcpp_result_gen;
END_RCPP
}
// wrap_rss_varbvsr_iter_alt
Rcpp::List wrap_rss_varbvsr_iter_alt(const Eigen::SparseMatrix<double> SiRiS, const double sigma_beta, const double logodds, const Eigen::ArrayXd betahat, const Eigen::ArrayXd se, Eigen::ArrayXd& alpha, Eigen::ArrayXd& mu, Eigen::ArrayXd& SiRiSr, bool reverse);
RcppExport SEXP rssr_wrap_rss_varbvsr_iter_alt(SEXP SiRiSSEXP, SEXP sigma_betaSEXP, SEXP logoddsSEXP, SEXP betahatSEXP, SEXP seSEXP, SEXP alphaSEXP, SEXP muSEXP, SEXP SiRiSrSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double> >::type SiRiS(SiRiSSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type se(seSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type SiRiSr(SiRiSrSEXP);
    Rcpp::traits::input_parameter< bool >::type reverse(reverseSEXP);
    rcpp_result_gen = Rcpp::wrap(wrap_rss_varbvsr_iter_alt(SiRiS, sigma_beta, logodds, betahat, se, alpha, mu, SiRiSr, reverse));
    return rcpp_result_gen;
END_RCPP
}
// wrap_rss_varbvsr_iter
Rcpp::List wrap_rss_varbvsr_iter(const Eigen::SparseMatrix<double> SiRiS, const double sigma_beta, const double logodds, const Eigen::ArrayXd betahat, const Eigen::ArrayXd se, Eigen::ArrayXd& alpha, Eigen::ArrayXd& mu, Eigen::ArrayXd& SiRiSr, bool reverse);
RcppExport SEXP rssr_wrap_rss_varbvsr_iter(SEXP SiRiSSEXP, SEXP sigma_betaSEXP, SEXP logoddsSEXP, SEXP betahatSEXP, SEXP seSEXP, SEXP alphaSEXP, SEXP muSEXP, SEXP SiRiSrSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double> >::type SiRiS(SiRiSSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type se(seSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type SiRiSr(SiRiSrSEXP);
    Rcpp::traits::input_parameter< bool >::type reverse(reverseSEXP);
    rcpp_result_gen = Rcpp::wrap(wrap_rss_varbvsr_iter(SiRiS, sigma_beta, logodds, betahat, se, alpha, mu, SiRiSr, reverse));
    return rcpp_result_gen;
END_RCPP
}
// rss_varbvsr_squarem
Rcpp::List rss_varbvsr_squarem(const Eigen::SparseMatrix<double>& SiRiS, const double sigma_beta, const double logodds, const Eigen::ArrayXd betahat, const Eigen::ArrayXd se, const Eigen::ArrayXd& talpha0, const Eigen::ArrayXd& tmu0, const Eigen::ArrayXd& tSiRiSr0, double tolerance, int itermax, Rcpp::LogicalVector verbose, Rcpp::LogicalVector lnz_tol);
RcppExport SEXP rssr_rss_varbvsr_squarem(SEXP SiRiSSEXP, SEXP sigma_betaSEXP, SEXP logoddsSEXP, SEXP betahatSEXP, SEXP seSEXP, SEXP talpha0SEXP, SEXP tmu0SEXP, SEXP tSiRiSr0SEXP, SEXP toleranceSEXP, SEXP itermaxSEXP, SEXP verboseSEXP, SEXP lnz_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type SiRiS(SiRiSSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type se(seSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type talpha0(talpha0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type tmu0(tmu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type tSiRiSr0(tSiRiSr0SEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type lnz_tol(lnz_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rss_varbvsr_squarem(SiRiS, sigma_beta, logodds, betahat, se, talpha0, tmu0, tSiRiSr0, tolerance, itermax, verbose, lnz_tol));
    return rcpp_result_gen;
END_RCPP
}
// rss_varbvsr_squarem_fit_logodds
Rcpp::List rss_varbvsr_squarem_fit_logodds(const Eigen::SparseMatrix<double>& SiRiS, const double sigma_beta, const double logodds0, const Eigen::ArrayXd betahat, const Eigen::ArrayXd se, const Eigen::ArrayXd& talpha0, const Eigen::ArrayXd& tmu0, const Eigen::ArrayXd& tSiRiSr0, double tolerance, int itermax, Rcpp::LogicalVector verbose, Rcpp::LogicalVector lnz_tol);
RcppExport SEXP rssr_rss_varbvsr_squarem_fit_logodds(SEXP SiRiSSEXP, SEXP sigma_betaSEXP, SEXP logodds0SEXP, SEXP betahatSEXP, SEXP seSEXP, SEXP talpha0SEXP, SEXP tmu0SEXP, SEXP tSiRiSr0SEXP, SEXP toleranceSEXP, SEXP itermaxSEXP, SEXP verboseSEXP, SEXP lnz_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type SiRiS(SiRiSSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type logodds0(logodds0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type se(seSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type talpha0(talpha0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type tmu0(tmu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type tSiRiSr0(tSiRiSr0SEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type lnz_tol(lnz_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rss_varbvsr_squarem_fit_logodds(SiRiS, sigma_beta, logodds0, betahat, se, talpha0, tmu0, tSiRiSr0, tolerance, itermax, verbose, lnz_tol));
    return rcpp_result_gen;
END_RCPP
}
// rss_varbvsr_naive
Rcpp::List rss_varbvsr_naive(const Eigen::SparseMatrix<double>& SiRiS, const double sigma_beta, const double logodds, const Eigen::ArrayXd betahat, const Eigen::ArrayXd se, const Eigen::ArrayXd& talpha0, const Eigen::ArrayXd& tmu0, const Eigen::ArrayXd& tSiRiSr0, double tolerance, int itermax, Rcpp::LogicalVector verbose, Rcpp::LogicalVector lnz_tol);
RcppExport SEXP rssr_rss_varbvsr_naive(SEXP SiRiSSEXP, SEXP sigma_betaSEXP, SEXP logoddsSEXP, SEXP betahatSEXP, SEXP seSEXP, SEXP talpha0SEXP, SEXP tmu0SEXP, SEXP tSiRiSr0SEXP, SEXP toleranceSEXP, SEXP itermaxSEXP, SEXP verboseSEXP, SEXP lnz_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type SiRiS(SiRiSSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type se(seSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type talpha0(talpha0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type tmu0(tmu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type tSiRiSr0(tSiRiSr0SEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type lnz_tol(lnz_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rss_varbvsr_naive(SiRiS, sigma_beta, logodds, betahat, se, talpha0, tmu0, tSiRiSr0, tolerance, itermax, verbose, lnz_tol));
    return rcpp_result_gen;
END_RCPP
}
// rss_varbvsr_squarem_iter
double rss_varbvsr_squarem_iter(const Eigen::MappedSparseMatrix<double> SiRiS, const double sigma_beta, const double logodds, const Eigen::Map<Eigen::ArrayXd> betahat, const Eigen::Map<Eigen::ArrayXd> se, const Eigen::Map<Eigen::ArrayXd> talpha0, const Eigen::Map<Eigen::ArrayXd> tmu0, const Eigen::Map<Eigen::ArrayXd> tSiRiSr0, double tolerance, int itermax, Rcpp::LogicalVector lnz_tol);
RcppExport SEXP rssr_rss_varbvsr_squarem_iter(SEXP SiRiSSEXP, SEXP sigma_betaSEXP, SEXP logoddsSEXP, SEXP betahatSEXP, SEXP seSEXP, SEXP talpha0SEXP, SEXP tmu0SEXP, SEXP tSiRiSr0SEXP, SEXP toleranceSEXP, SEXP itermaxSEXP, SEXP lnz_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type SiRiS(SiRiSSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type se(seSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type talpha0(talpha0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type tmu0(tmu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type tSiRiSr0(tSiRiSr0SEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type lnz_tol(lnz_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rss_varbvsr_squarem_iter(SiRiS, sigma_beta, logodds, betahat, se, talpha0, tmu0, tSiRiSr0, tolerance, itermax, lnz_tol));
    return rcpp_result_gen;
END_RCPP
}
// grid_search_rss_varbvsr
Rcpp::DataFrame grid_search_rss_varbvsr(const Eigen::MappedSparseMatrix<double> SiRiS, const Eigen::Map<Eigen::ArrayXd> sigma_beta, const Eigen::Map<Eigen::ArrayXd> logodds, const Eigen::Map<Eigen::ArrayXd> betahat, const Eigen::Map<Eigen::ArrayXd> se, const Eigen::Map<Eigen::ArrayXd> talpha0, const Eigen::Map<Eigen::ArrayXd> tmu0, const Eigen::Map<Eigen::ArrayXd> tSiRiSr0, double tolerance, int itermax, Rcpp::LogicalVector verbose, Rcpp::LogicalVector lnz_tol);
RcppExport SEXP rssr_grid_search_rss_varbvsr(SEXP SiRiSSEXP, SEXP sigma_betaSEXP, SEXP logoddsSEXP, SEXP betahatSEXP, SEXP seSEXP, SEXP talpha0SEXP, SEXP tmu0SEXP, SEXP tSiRiSr0SEXP, SEXP toleranceSEXP, SEXP itermaxSEXP, SEXP verboseSEXP, SEXP lnz_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type SiRiS(SiRiSSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type se(seSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type talpha0(talpha0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type tmu0(tmu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type tSiRiSr0(tSiRiSr0SEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type lnz_tol(lnz_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(grid_search_rss_varbvsr(SiRiS, sigma_beta, logodds, betahat, se, talpha0, tmu0, tSiRiSr0, tolerance, itermax, verbose, lnz_tol));
    return rcpp_result_gen;
END_RCPP
}
// rss_varbvsr_fit_hyperparameters
Rcpp::DataFrame rss_varbvsr_fit_hyperparameters(const Eigen::MappedSparseMatrix<double> SiRiS, const Eigen::Map<Eigen::ArrayXd> sigma_beta, const Eigen::Map<Eigen::ArrayXd> logodds0, const Eigen::Map<Eigen::ArrayXd> betahat, const Eigen::Map<Eigen::ArrayXd> se, const Eigen::Map<Eigen::ArrayXd> talpha0, const Eigen::Map<Eigen::ArrayXd> tmu0, const Eigen::Map<Eigen::ArrayXd> tSiRiSr0, double tolerance, int itermax, Rcpp::LogicalVector verbose, Rcpp::LogicalVector lnz_tol);
RcppExport SEXP rssr_rss_varbvsr_fit_hyperparameters(SEXP SiRiSSEXP, SEXP sigma_betaSEXP, SEXP logodds0SEXP, SEXP betahatSEXP, SEXP seSEXP, SEXP talpha0SEXP, SEXP tmu0SEXP, SEXP tSiRiSr0SEXP, SEXP toleranceSEXP, SEXP itermaxSEXP, SEXP verboseSEXP, SEXP lnz_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type SiRiS(SiRiSSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type logodds0(logodds0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type se(seSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type talpha0(talpha0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type tmu0(tmu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type tSiRiSr0(tSiRiSr0SEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type lnz_tol(lnz_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rss_varbvsr_fit_hyperparameters(SiRiS, sigma_beta, logodds0, betahat, se, talpha0, tmu0, tSiRiSr0, tolerance, itermax, verbose, lnz_tol));
    return rcpp_result_gen;
END_RCPP
}
// rss_varbvsr_update
void rss_varbvsr_update(const double betahat, const double se, const double sigma_beta, const Eigen::ArrayXd& SiRiS_snp, Eigen::ArrayXd& SiRiSr, const double SiRiSr_snp, const double logodds, double& alpha, double& mu);
RcppExport SEXP rssr_rss_varbvsr_update(SEXP betahatSEXP, SEXP seSEXP, SEXP sigma_betaSEXP, SEXP SiRiS_snpSEXP, SEXP SiRiSrSEXP, SEXP SiRiSr_snpSEXP, SEXP logoddsSEXP, SEXP alphaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const double >::type se(seSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type SiRiS_snp(SiRiS_snpSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type SiRiSr(SiRiSrSEXP);
    Rcpp::traits::input_parameter< const double >::type SiRiSr_snp(SiRiSr_snpSEXP);
    Rcpp::traits::input_parameter< const double >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double& >::type mu(muSEXP);
    rss_varbvsr_update(betahat, se, sigma_beta, SiRiS_snp, SiRiSr, SiRiSr_snp, logodds, alpha, mu);
    return R_NilValue;
END_RCPP
}
// SiRSi
Eigen::SparseMatrix<double> SiRSi(const Eigen::SparseMatrix<double>& R, const Eigen::VectorXd Si);
RcppExport SEXP rssr_SiRSi(SEXP RSEXP, SEXP SiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type Si(SiSEXP);
    rcpp_result_gen = Rcpp::wrap(SiRSi(R, Si));
    return rcpp_result_gen;
END_RCPP
}
// genSymm
Eigen::SparseMatrix<double> genSymm(const Eigen::SparseMatrix<double>& R);
RcppExport SEXP rssr_genSymm(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(genSymm(R));
    return rcpp_result_gen;
END_RCPP
}
// rss_varbvsr_iter_naive_reference
Eigen::MatrixXd rss_varbvsr_iter_naive_reference(Eigen::SparseMatrix<double> SiRiS, Rcpp::NumericVector sigma_beta, const Eigen::VectorXd logodds, const Eigen::VectorXd betahat, const Eigen::VectorXd se, const Eigen::ArrayXd alpha0, const Eigen::ArrayXd mu0, const Eigen::ArrayXd SiRiSr0, bool reverse);
RcppExport SEXP rssr_rss_varbvsr_iter_naive_reference(SEXP SiRiSSEXP, SEXP sigma_betaSEXP, SEXP logoddsSEXP, SEXP betahatSEXP, SEXP seSEXP, SEXP alpha0SEXP, SEXP mu0SEXP, SEXP SiRiSr0SEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type SiRiS(SiRiSSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type se(seSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type SiRiSr0(SiRiSr0SEXP);
    Rcpp::traits::input_parameter< bool >::type reverse(reverseSEXP);
    rcpp_result_gen = Rcpp::wrap(rss_varbvsr_iter_naive_reference(SiRiS, sigma_beta, logodds, betahat, se, alpha0, mu0, SiRiSr0, reverse));
    return rcpp_result_gen;
END_RCPP
}
