// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// betavar
Eigen::ArrayXd betavar(const Eigen::ArrayXd& p, const Eigen::ArrayXd& mu, Eigen::ArrayXd& s);
RcppExport SEXP rssr_betavar(SEXP pSEXP, SEXP muSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(betavar(p, mu, s));
    return rcpp_result_gen;
END_RCPP
}
// intklbeta_rssbvsr
double intklbeta_rssbvsr(const Eigen::ArrayXd& alpha, const Eigen::ArrayXd& mu, const Eigen::ArrayXd& sigma_square, const double& sigma_beta_square);
RcppExport SEXP rssr_intklbeta_rssbvsr(SEXP alphaSEXP, SEXP muSEXP, SEXP sigma_squareSEXP, SEXP sigma_beta_squareSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type sigma_square(sigma_squareSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_beta_square(sigma_beta_squareSEXP);
    rcpp_result_gen = Rcpp::wrap(intklbeta_rssbvsr(alpha, mu, sigma_square, sigma_beta_square));
    return rcpp_result_gen;
END_RCPP
}
// intgamma
double intgamma(const Eigen::ArrayXd& logodds, const Eigen::ArrayXd& alpha);
RcppExport SEXP rssr_intgamma(SEXP logoddsSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(intgamma(logodds, alpha));
    return rcpp_result_gen;
END_RCPP
}
// rss_varbvsr
Eigen::MatrixXd rss_varbvsr(Eigen::SparseMatrix<double> SiRiS, Rcpp::NumericVector sigma_beta, const Eigen::VectorXd logodds, const Eigen::VectorXd betahat, const Eigen::VectorXd se, const Eigen::ArrayXd& alpha0, const Eigen::ArrayXd& mu0, const Eigen::ArrayXd& SiRiSr0, bool reverse);
RcppExport SEXP rssr_rss_varbvsr(SEXP SiRiSSEXP, SEXP sigma_betaSEXP, SEXP logoddsSEXP, SEXP betahatSEXP, SEXP seSEXP, SEXP alpha0SEXP, SEXP mu0SEXP, SEXP SiRiSr0SEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type SiRiS(SiRiSSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type se(seSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type SiRiSr0(SiRiSr0SEXP);
    Rcpp::traits::input_parameter< bool >::type reverse(reverseSEXP);
    rcpp_result_gen = Rcpp::wrap(rss_varbvsr(SiRiS, sigma_beta, logodds, betahat, se, alpha0, mu0, SiRiSr0, reverse));
    return rcpp_result_gen;
END_RCPP
}
// rss_varbvsr_fast
Eigen::MatrixXd rss_varbvsr_fast(Eigen::SparseMatrix<double> SiRiS, const Eigen::VectorXd sigma_beta, const Eigen::VectorXd logodds, const Eigen::VectorXd betahat, const Eigen::VectorXd se, Eigen::ArrayXd& alpha0, Eigen::ArrayXd& mu0, Eigen::ArrayXd& SiRiSr0, bool Squarem_update, double tolerance);
RcppExport SEXP rssr_rss_varbvsr_fast(SEXP SiRiSSEXP, SEXP sigma_betaSEXP, SEXP logoddsSEXP, SEXP betahatSEXP, SEXP seSEXP, SEXP alpha0SEXP, SEXP mu0SEXP, SEXP SiRiSr0SEXP, SEXP Squarem_updateSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type SiRiS(SiRiSSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type se(seSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type SiRiSr0(SiRiSr0SEXP);
    Rcpp::traits::input_parameter< bool >::type Squarem_update(Squarem_updateSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(rss_varbvsr_fast(SiRiS, sigma_beta, logodds, betahat, se, alpha0, mu0, SiRiSr0, Squarem_update, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// rss_varbvsr_update
void rss_varbvsr_update(const double betahat, const double se, const double sigma_beta, const Eigen::ArrayXd& SiRiS_snp, Eigen::ArrayXd& SiRiSr, const double SiRiSr_snp, const double logodds, double& alpha, double& mu);
RcppExport SEXP rssr_rss_varbvsr_update(SEXP betahatSEXP, SEXP seSEXP, SEXP sigma_betaSEXP, SEXP SiRiS_snpSEXP, SEXP SiRiSrSEXP, SEXP SiRiSr_snpSEXP, SEXP logoddsSEXP, SEXP alphaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const double >::type se(seSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type SiRiS_snp(SiRiS_snpSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type SiRiSr(SiRiSrSEXP);
    Rcpp::traits::input_parameter< const double >::type SiRiSr_snp(SiRiSr_snpSEXP);
    Rcpp::traits::input_parameter< const double >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double& >::type mu(muSEXP);
    rss_varbvsr_update(betahat, se, sigma_beta, SiRiS_snp, SiRiSr, SiRiSr_snp, logodds, alpha, mu);
    return R_NilValue;
END_RCPP
}
// olog_sigmoid
Eigen::ArrayXd olog_sigmoid(Eigen::ArrayXd x);
RcppExport SEXP rssr_olog_sigmoid(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(olog_sigmoid(x));
    return rcpp_result_gen;
END_RCPP
}
// SiRSi
Eigen::SparseMatrix<double> SiRSi(const Eigen::SparseMatrix<double>& R, const Eigen::VectorXd Si);
RcppExport SEXP rssr_SiRSi(SEXP RSEXP, SEXP SiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type Si(SiSEXP);
    rcpp_result_gen = Rcpp::wrap(SiRSi(R, Si));
    return rcpp_result_gen;
END_RCPP
}
